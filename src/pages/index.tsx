import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { api, type RouterOutputs } from "../utils/api";
import { Header } from "../components/Header";
import { NoteCard } from "../components/NoteCard";
import { NoteEditor } from "../components/NoteEditer";
import Delete from "../components/svgs/Delete";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
      void refetchNotes();
    },
  });

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      void refetchTopics();
      void refetchNotes();
    },
  });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  return (
    <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
      <div className="px-2">
        <ul className="menu rounded-box w-56 space-y-2 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <div className="justify-star flex items-center">
                <input
                  type="checkbox"
                  id="my-modal-3"
                  className="modal-toggle"
                />

                <div className="modal">
                  <div className="modal-box relative">
                    <h3 className="text-lg font-bold">Are you sure?</h3>
                    <p className="py-4">
                      This will permanently delete all notes within this topic.
                    </p>
                    <div className="flex w-full items-center justify-center space-x-12">
                      <label
                        htmlFor="my-modal-3"
                        className="btn-xs btn border-none bg-white px-5 text-sm font-normal text-black hover:bg-slate-100"
                      >
                        Cancel
                      </label>
                      <button
                        className="btn-warning btn-xs btn px-5"
                        onClick={() => deleteTopic.mutate({ id: topic.id })}
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
                <label
                  htmlFor="my-modal-3"
                  className="transform-[color, translate] duration-200 hover:scale-[1.05] hover:text-red-600"
                >
                  <Delete />
                </label>
                <div
                  onClick={(e) => {
                    e.preventDefault();
                    setSelectedTopic(topic);
                  }}
                  className="h-full w-full"
                >
                  {topic.title}
                </div>
              </div>
            </li>
          ))}
        </ul>
        <div className="divider"></div>
        <input
          type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value,
              });
              e.currentTarget.value = "";
            }
          }}
        />
      </div>
      <div className="col-span-3">
        <div>
          {notes?.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
                note={note}
                onDelete={() => void deleteNote.mutate({ id: note.id })}
              />
            </div>
          ))}
        </div>

        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </div>
    </div>
  );
};
